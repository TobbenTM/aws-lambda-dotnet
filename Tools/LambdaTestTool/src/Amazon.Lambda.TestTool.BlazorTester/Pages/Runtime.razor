@page "/runtime"

@using Amazon.Lambda.TestTool.BlazorTester.Services
@using Amazon.Lambda.TestTool.SampleRequests;

@inject LocalLambdaOptions LambdaOptions
@inject IRuntimeApiDataStore RuntimeApiModel
@inject IModalService Modal

<h2>Runtime</h2>

<p>
    View runtime API state
</p>

<div class="row">
    <div class="col-sm form-group">
        <label class="" for="sample-requests">Example Requests:</label>
        <select class="control" id="sample-requests" @bind="SelectedSampleRequestName">
            <option id="void-select-request"> -- select a request -- </option>
            @if (@SampleRequests.ContainsKey(SampleRequestManager.SAVED_REQUEST_GROUP))
            {
                <optgroup id="saved-select-request-group" label="@SampleRequestManager.SAVED_REQUEST_GROUP">
                    @foreach (var request in SampleRequests[SampleRequestManager.SAVED_REQUEST_GROUP])
                    {
                        <option value="@request.Filename">@request.Name</option>
                    }
                </optgroup>
            }
            @foreach (var group in SampleRequests.Keys)
            {
                @if (!string.Equals(group, SampleRequestManager.SAVED_REQUEST_GROUP))
                {
                    <optgroup label="@group">
                        @foreach (var request in SampleRequests[group])
                        {
                            <option value="@request.Filename">@request.Name</option>
                        }
                    </optgroup>
                }
            }
        </select>
        <label class="col-xs-3 control-label" for="function-payload">Function Input:</label>
        <textarea class="form-control" rows="10" @bind="FunctionInput" placeholder="JSON document as input to Lambda Function. Plain strings must be wrapped in quotes."></textarea>
        <p style="margin-top:10px">
            <b>Tip:</b> If a Lambda function using the default serializer, Amazon.Lambda.Serialization.Json, is deployed with the environment variable <b>LAMBDA_NET_SERIALIZER_DEBUG</b> set to <b>true</b>
            the JSON input for the Lambda function will be written to CloudWatch Logs. The captured JSON can then be used in this tool to step
            through the code.
        </p>        
    </div>
    <div class="col-sm form-group">
        <label class="" for="sample-requests">Active Event:</label>
        @if (RuntimeApiModel.ActiveEvent == null)
        {
            <h2>No active event</h2>
        }
        else
        {
            <form>
                  <div id="from">
                      <p>Status: @RuntimeApiModel.ActiveEvent.EventStatus</p>
                      <P>Last Updated: @RuntimeApiModel.ActiveEvent.LastUpdated</P>
                      @if (RuntimeApiModel.ActiveEvent.EventStatus == IEventContainer.Status.Failure)
                      {
                          <p>Error Type: @RuntimeApiModel.ActiveEvent.ErrorType</p>
                          <p>
                              Error Response:
                              <pre class="form-control" style="@Constants.ResponseErrorStyleSizeConstraint" >@RuntimeApiModel.ActiveEvent.ErrorResponse</pre>
                          </p>
                      }
                      else
                      {
                          <p>
                              Response:
                              <pre class="form-control" style="@Constants.ResponseSuccessStyleSizeConstraint">@Amazon.Lambda.TestTool.Utils.PrettyPrintJson(RuntimeApiModel.ActiveEvent.Response)</pre>
                          </p>
                      }
                  </div>
            </form>
        }
    </div>
</div>

<div class="row">
    <div class="col-sm form-group">

    </div>
</div>

<div class="row mt-3">
    <div class="col-sm form-group">
        <button class="btn btn-primary btn-sm" @onclick="OnAddEventClick">Queue Event</button>
    </div>
</div>

<div class="row">
    <div class="col-sm form-group">
        <label class="col-xs-3 control-label">Queued Events</label>
        <div class="col-xs-5">
            <select class="form-control">
                @foreach (var evnt in @RuntimeApiModel.QueuedEvents)
                {
                    <option value="@evnt.AwsRequestId">@evnt.AwsRequestId</option>
                }
            </select>
        </div>
    </div>
    <div class="col-sm form-group">
        <label class="col-xs-3 control-label">Executed Events</label>
        <div class="col-xs-5">
            <select class="form-control">
                @foreach (var evnt in @RuntimeApiModel.ExecutedEvents)
                {
                    <option value="@evnt.AwsRequestId">@evnt.AwsRequestId</option>
                }
            </select>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm form-group">
        <label class="" for="sample-requests">Example Requests:</label>
        <select class="control" id="sample-requests" @bind="SelectedSampleRequestName">
            <option id="void-select-request"> -- select a request -- </option>
            @if (@SampleRequests.ContainsKey(SampleRequestManager.SAVED_REQUEST_GROUP))
            {
                <optgroup id="saved-select-request-group" label="@SampleRequestManager.SAVED_REQUEST_GROUP">
                    @foreach (var request in SampleRequests[SampleRequestManager.SAVED_REQUEST_GROUP])
                    {
                        <option value="@request.Filename">@request.Name</option>
                    }
                </optgroup>
            }
            @foreach (var group in SampleRequests.Keys)
            {
                @if (!string.Equals(group, SampleRequestManager.SAVED_REQUEST_GROUP))
                {
                    <optgroup label="@group">
                        @foreach (var request in SampleRequests[group])
                        {
                            <option value="@request.Filename">@request.Name</option>
                        }
                    </optgroup>
                }
            }
        </select>
    </div>
</div>



@code {
    
    private string FunctionInput { get; set; }
    
    private IDictionary<string, IList<LambdaRequest>> SampleRequests { get; set; }
    
    string _selectedSampleRequestName;
    string SelectedSampleRequestName
    {
        get => this._selectedSampleRequestName;
        set
        {
            this._selectedSampleRequestName = value;
            this.FunctionInput = SampleRequestManager.GetRequest(this._selectedSampleRequestName);
            this.StateHasChanged();
        }
    }

    SampleRequestManager SampleRequestManager { get; set; }
    
    protected override void OnInitialized()
    {
        RuntimeApiModel.StateChange += RuntimeApiModelOnStateChange;
        this.SampleRequestManager = new SampleRequestManager(LambdaOptions.GetPreferenceDirectory(false));
        this.SampleRequests = SampleRequestManager.GetSampleRequests();

        RuntimeApiModel.QueueEvent("{\"body\" : \"main\"}");
        
        RuntimeApiModel.TryActivateEvent(out var evnt);
        //RuntimeApiModel.ReportError(evnt.AwsRequestId, "BadRequest", "fsdnslkngelkgnene;g");
        RuntimeApiModel.ReportSuccess(evnt.AwsRequestId, "Lots of data goes here");
    }

    private void RuntimeApiModelOnStateChange(object sender, EventArgs e)
    {
        this.InvokeAsync(this.StateHasChanged);
    }

    void OnAddEventClick()
    {
        RuntimeApiModel.QueueEvent(this.FunctionInput);
        this.FunctionInput = "";
        this.StateHasChanged();
    }    
}